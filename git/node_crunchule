#!/usr/bin/env fish

if not set -q argv[1]
  set SCRIPT_NAME (basename (status -f))
  echo "Usage: $SCRIPT_NAME <path>"
  exit 1
end

argparse --name=(basename (status -f)) "a/all" "x/extract" -- $argv

cd $argv[1]

# Workaround ü§∑‚Äç‚ôÄÔ∏è
if set -q _flag_extract
  set EXTRACT $_flag_extract
end

set CONVERTED ""

function do_zip
  if set -q EXTRACT
    7z x node_modules.7z node_modules; and trash node_modules.7z
  else
    7z a node_modules.7z node_modules; and trash node_modules
  end
  set CONVERTED $CONVERTED (pwd)/
end

function inner_loop
  echo "----------------"
  echo (pwd)/

  if set -q _flag_all
    echo "Converting!"
    do_zip
  else
    read -l -P "Convert node_modules? [y/N]" CONFIRMATION
    switch $CONFIRMATION
      case Y y
        echo "Converting!"
        do_zip
      case "" N n
        echo "Skipping"
    end
  end
end

# find . -name package.json -prune -o "package.json"
for packageJSON in (find . -type d -name node_modules -prune -o -name "package.json" -print)
  set REPO_DIR (dirname $packageJSON)
  cd $REPO_DIR
  if set -q EXTRACT
    if test -f node_modules.7z
      inner_loop
    end
  else
    if test -d node_modules
      inner_loop
    end
  end
  cd -
end

echo "Converted repos were:"
for dir in $CONVERTED
  echo $dir
end
