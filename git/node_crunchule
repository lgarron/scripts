#!/usr/bin/env fish

function show_help
  set SCRIPT_NAME (basename (status -f))
  echo "Usage: $SCRIPT_NAME <path>"
  exit 1
end

argparse --name=(basename (status -f)) "d/dry-run" "y/yes" "x/extract" -- $argv; or show_help

if not set -q argv[1]
  show_help
end
cd $argv[1]

# Workaround ü§∑‚Äç‚ôÄÔ∏è
if set -q _flag_yes
  set YES_FLAG $_flag_yes
end
if set -q _flag_extract
  set EXTRACT $_flag_extract
end
if set -q _flag_dry_run
  set DRY_RUN $_flag_dry_run
end

set CONVERTED ""

function do_zip
  if set -q EXTRACT
    7z x node_modules.7z node_modules; and trash node_modules.7z
  else
    7z a node_modules.7z node_modules; and trash node_modules
  end
  set CONVERTED $CONVERTED (pwd)/
end

function inner_loop
  echo "----------------"
  echo (pwd)/

  if not set -q DRY_RUN
    if set -q YES_FLAG
      echo "Converting!"
      do_zip
    else
      read -l -P "Convert node_modules? [y/N] " CONFIRMATION
      switch $CONFIRMATION
        case Y y
          echo "Converting!"
          do_zip
        case "" N n
          echo "Skipping"
      end
    end
  end
end

# for packageJSON in (find . -type d -name node_modules -prune -o -name "package.json" -print)
for packageJSON in (mdfind -onlyin . -name package.json)
  set REPO_DIR (dirname $packageJSON)
  cd $REPO_DIR
  if set -q EXTRACT
    if test -f node_modules.7z
      inner_loop
    end
  else
    if test -d node_modules
      inner_loop
    end
  end
  cd -
end

echo "----------------"
echo "Converted repos were:"
for dir in $CONVERTED
  echo $dir
end
